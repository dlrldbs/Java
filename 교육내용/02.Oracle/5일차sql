--MANAGER 테이블 생성 - 사원번호(숫자형),사원이름(문자형),입사일(날짜형-기본값:현재),급여(숫자형-기본값:1000)
CREATE TABLE MANAGER(NO NUMBER(4),NAME VARCHAR2(20),STARTDATE DATE DEFAULT SYSDATE,PAY NUMBER DEFAULT 1000);

--테이블 목록 및 구조 확인
SELECT TABLE_NAME FROM USER_TABLES;
DESC MANAGER;

--USER_TAB_COLUMNS : 테이블의 컬럼 정보를 제공하는 딕셔너리
SELECT COLUMN_NAME,DATA_DEFAULT FROM USER_TAB_COLUMNS WHERE TABLE_NAME='MANAGER';

--MANAGER 테이블에 행 삽입 - 컬럼 생략 : 생략된 컬럼에는 기본값이 전달되어 삽입 처리
INSERT INTO MANAGER(NO,NAME) VALUES(1000,'홍길동');
SELECT * FROM MANAGER;
COMMIT;

--DEFAULT 키워드를 사용하여 기본값을 제공받아 삽입 처리
INSERT INTO MANAGER VALUES(2000,'임꺽정',DEFAULT,DEFAULT);
SELECT * FROM MANAGER;
COMMIT;

--제약조건(CONSTRAINT) : 컬럼에 비정상적인 값이 저장되는 것을 방지하기 위한 기능 - 데이타 무결성 유지
--컬럼 수준의 제약조건 : 테이블의 속성 선언시 컬럼에 제약조건을 설정
--테이블 수준의 제약조건 : 테이블 선언시 테이블의 특정 컬럼에 제약조건을 설정

--CHECK : 컬럼값에 대한 조건을 제공하여 조건에 맞는 값만 저장되도록 설정하는 제약조건
--컬럼 수준의 제약조건 또는 테이블 수준 제약조건으로 설정 가능

--SAWON1 테이블 생성 - 사원번호(숫자형),사원이름(문자형),급여(숫자형)
CREATE TABLE SAWON1(NO NUMBER(4),NAME VARCHAR2(20),PAT NUMBER);

--SAWON1 테이블에 행 삽입 - 모든 숫자값이 급여(PAY)에 전달되어 삽입 처리 가능
INSERT INTO SAWON1 VALUES(1000,'홍길동',8000000);
INSERT INTO SAWON1 VALUES(2000,'임꺽정',800000);
SELECT * FROM SAWON1;
COMMIT;

--SAWON2 테이블 생성 - 사원번호(숫자형),사원이름(문자형),급여(숫자형 - 최소급여:5000000)
--컬럼수준의 제약조건 : CHECK 제약조건을 설정하는 컬럼만으로 CHECK 제약조건의 조건식 작성
CREATE TABLE SAWON2(NO NUMBER(4),NAME VARCHAR2(20),PAY NUMBER CHECK(PAY>=5000000));

--SAWON2 테이블에 행 삽입
INSERT INTO SAWON2 VALUES(1000,'홍길동',8000000);
INSERT INTO SAWON2 VALUES(2000,'임꺽정',800000);--CHECK 제약조건을 위반하여 에러 발생
SELECT * FROM SAWON2;
COMMIT;

--USER_CONSTRAINTS : 테이블에 설정된 제약조건을 제공하는 딕셔너리
--CONSTRAINT_NAME : 제약조건을 구분하기 위한 이름(식별자) - 제약조건의 이름을 설정하지 않으면 SYS_XXXXXXX 형식으로 자동 설정
--CONSTRAINT_TYPE : 제약조건의 종류 - C(CHECK), U(UNIQUE), P(PRIMARY KEY), R(REFERENCE)
--SEARCH_CONDITION : CHEKC 제약조건으로 설정된 조건식
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE TABLE_NAME='SAWON2';

--제약조건을 설정할 경우 제역조건 관리을 효율적으로 하기 위해 제약조건의 이름을 명시하는 것을 권장
--형식)컬럼명 자료형[(크기)] CONSTRAINT 제약조건명 제약조건

--SAWON3 테이블 생성 - 사원번호(숫자형),사원이름(문자형),급여(숫자형 - 최소급여:5000000)
CREATE TABLE SAWON3(NO NUMBER(4),NAME VARCHAR2(20),PAY NUMBER CONSTRAINT SAWON3_PAY_CHECK CHECK(PAY>=5000000));

--제약조건 확인
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE TABLE_NAME='SAWON3';

--SAWON4 테이블 생성 - 사원번호(숫자형),사원이름(문자형),급여(숫자형 - 최소급여:5000000);
--테이블 수준의 제약조건으로 설정 - 테이블 수준의 제약조건은 모든 컬럼을 사용하여 CHECK 제약조건의 조건식 작성 가능
CREATE TABLE SAWON4(NO NUMBER(4),NAME VARCHAR2(20),PAY NUMBER,CONSTRAINT SAWON4_PAY_CHECK CHECK(PAY>=5000000));

--제약조건 확인
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE TABLE_NAME='SAWON4';

--NOT NULL : NULL를 허용하지 않는 제약조건 - 컬럼에 반드시 값이 저장되도록 설정하는 제약조건
--컬럼 수준의 제약조건만 가능

--DEPT1 테이블 생성 : 부서번호(숫자형),부서이름(문자형),부서위치(문자형)
CREATE TABLE DEPT1(DEPTNO NUMBER(2),DNAME VARCHAR2(12),LOC VARCHAR2(11));
DESC DEPT1;

--DEPT1 테이블에 행 삽입
INSERT INTO DEPT1 VALUES(10,'총무부','서울시');
INSERT INTO DEPT1 VALUES(20,NULL,NULL);--명시적 NULL 사용
INSERT INTO DEPT1(DEPTNO) VALUES(30);--묵시적 NULL 사용
SELECT * FROM DEPT1;

--DEPT2 테이블 생성 : 부서번호(숫자형 - NOT NULL),부서이름(문자형 - NOT NULL),부서위치(문자형 - NOT NULL)
CREATE TABLE DEPT2(DEPTNO NUMBER(2) CONSTRAINT DEPT2_DEPTNO_NN NOT NULL,
    DNAME VARCHAR2(12) CONSTRAINT DEPT2_DNAME_NN NOT NULL,LOC VARCHAR2(11) CONSTRAINT DEPT2_LOC_NN NOT NULL);
DESC DEPT2;

--제약조건 확인 : NOT NULL 제약조건의 종류는 [C]로 표현
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS WHERE TABLE_NAME='DEPT2';

--DEPT2 테이블에 행 삽입
INSERT INTO DEPT2 VALUES(10,'총무부','서울시');
INSERT INTO DEPT2 VALUES(20,NULL,NULL);--NOT NULL 제약조건이 설정된 컬럼에 NULL를 전달할 경우 에러 발생
--생략된 컬럼의 기본값이 NULL인 경우 생략 컬럼에 NOT NULL 제약조건이 설정되어 있으면 에러 발생
INSERT INTO DEPT2(DEPTNO) VALUES(30);

--UNIQUE : 중복된 컬럼값 저장을 방지하기 위한 제약조건
--컬럼 수준의 제약조건 또는 테이블 수준의 제약조건으로 설정 가능
--테이블의 여러 컬럼에 UNIQUE 제역조건 설정이 가능하며 NULL 허용

--USER1 테이블 생성 - 아이디(문자형),이름(문자형),전화번호(문자형)
CREATE TABLE USER1(ID VARCHAR2(20),NAME VARCHAR2(30),PHONE VARCHAR2(15));

--USER1 테이블에 행 삽입
INSERT INTO USER1 VALUES('ABC','홍길동','010-1234-5678');
INSERT INTO USER1 VALUES('ABC','홍길동','010-1234-5678');
SELECT * FROM USER1;
COMMIT;

--USER2 테이블 생성 - 아이디(문자형 - UNIQUE),이름(문자형),전화번호(문자형 - UNIQUE)
CREATE TABLE USER2(ID VARCHAR2(20) CONSTRAINT USER2_ID_UK UNIQUE,NAME VARCHAR2(30)
    ,PHONE VARCHAR2(15) CONSTRAINT USER2_PHONE_UK UNIQUE);--컬럼 수준의 제약조건
    
--제약조건 확인
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE FROM USER_CONSTRAINTS WHERE TABLE_NAME='USER2';

--USER2 테이블에 행 삽입
INSERT INTO USER2 VALUES('ABC','홍길동','010-1234-5678');
INSERT INTO USER2 VALUES('ABC','임꺽정','010-5678-1234');--ID 컬럼값 중복에 의해 에러 발생
INSERT INTO USER2 VALUES('XYZ','임꺽정','010-1234-5678');--PHONE 컬럼값 중복에 의해 에러 발생
INSERT INTO USER2 VALUES('ABC','홍길동','010-1234-5678');--ID 컬럼값과 PHONE 컬럼값 중복에 의해 에러 발생
INSERT INTO USER2 VALUES('XYZ','임꺽정','010-5678-1234');
SELECT * FROM USER2;
COMMIT;

--UNIQUE 제약조건에 설정된 컬럼에 NULL를 전달하여 삽입 처리 가능
INSERT INTO USER2 VALUES('ASD','전우치',NULL);
--NULL은 값이 아니므로 UNIQUE 제약조건의 영향을 받지 않아 중복유무와 상관없이 삽입 처리 가능
INSERT INTO USER2 VALUES('QWE','일지매',NULL);
SELECT * FROM USER2;
COMMIT;

--USER3 테이블 생성 - 아이디(문자형 - UNIQUE),이름(문자형),전화번호(문자형 - UNIQUE)
CREATE TABLE USER3(ID VARCHAR2(20),NAME VARCHAR2(30),PHONE VARCHAR2(15),
     CONSTRAINT USER3_ID_UK UNIQUE(ID),CONSTRAINT USER3_PHONE_UK UNIQUE(PHONE));--테이블 수준의 제약조건

--제약조건 확인
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE FROM USER_CONSTRAINTS WHERE TABLE_NAME='USER3';

--USER3 테이블에 행 삽입
INSERT INTO USER3 VALUES('ABC','홍길동','010-1234-5678');
INSERT INTO USER3 VALUES('ABC','임꺽정','010-5678-1234');--ID 컬럼값 중복에 의해 에러 발생
INSERT INTO USER3 VALUES('XYZ','임꺽정','010-1234-5678');--PHONE 컬럼값 중복에 의해 에러 발생
INSERT INTO USER3 VALUES('ABC','홍길동','010-1234-5678');--ID 컬럼값과 PHONE 컬럼값 중복에 의해 에러 발생
INSERT INTO USER3 VALUES('XYZ','임꺽정','010-5678-1234');
SELECT * FROM USER3;
COMMIT;

--UNIQUE 제약조건은 테이블 수준의 제약조건을 사용하여 컬럼을 그룹화하여 중복 저장되는 것을 방지
--USER4 테이블 생성 - 아이디(문자형),이름(문자형),전화번호(문자형) : 아이디와 전화번호를 그룹화하여 UNIQUE 제약조건 설정
CREATE TABLE USER4(ID VARCHAR2(20),NAME VARCHAR2(30),PHONE VARCHAR2(15),
     CONSTRAINT USER4_ID_PHONE_UK UNIQUE(ID,PHONE));--테이블 수준의 제약조건만 가능

--제약조건 확인
SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE FROM USER_CONSTRAINTS WHERE TABLE_NAME='USER4';

--USER4 테이블에 행 삽입
INSERT INTO USER4 VALUES('ABC','홍길동','010-1234-5678');
INSERT INTO USER4 VALUES('ABC','임꺽정','010-5678-1234');--ID 컬럼값이 중복돼도 저장 가능
INSERT INTO USER4 VALUES('XYZ','전우치','010-1234-5678');--PHONE 컬럼값 중복돼도 저장 가능
INSERT INTO USER4 VALUES('ABC','일지매','010-1234-5678');--ID 컬럼값과 PHONE 컬럼값이 중복될 경우 에러 발생
SELECT * FROM USER4;
COMMIT;
