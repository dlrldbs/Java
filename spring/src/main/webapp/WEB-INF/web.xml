<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="https://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- context-param : 모든 웹프로그램 실행에 필요한 값을 제공하기 위한 엘리먼트 -->
	<!-- => contextConfigLocation 이름으로 스프링 컨테이너(WebApplocationContext 객체)에게
	Spring Bean Configuration File의 경로를 제공 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- 모든 웹프로그램에서 사용할 수 있는 Spring Bean를 등록하기 위한 Spring Bean Configuration File -->
		<!-- => 모든 Front Controller 역활을 하는 웹프로그램에게 필요한 객체를 제공하기 위해 Spring Bean으로 등록  -->
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- listener : WAS 프로그램이 시작될 때 Listener 클래스를 제공받아 객체로 생성하기 위한 엘리먼트 -->
	<!-- Listener 클래스 : ServletContextListener 인터페이스를 상속받은 자식클래스 -->
	<!-- => contextInitialized 메소드 : Listener 객체 생성 후 자동 호출되는 메소드 - 초기화 작업 -->
	<!-- => contextDestroyed 메소드 : Listener 객체 소멸 전 자동 호출되는 메소드 - 마무리 작업 -->
	<listener>
		<!-- listener-class : ServletContextListener 인터페이스를 상속받은 자식클래스를 설정하기 위한 엘리먼트 -->
		<!-- => WAS 프로그램이 시작될 때 ContextLoaderListener 클래스를 객체로 생성하고
		contextInitialized 메소드를 호출하여 초기화 작업 -->
		<!-- ContextLoaderListener 클래스의 contextInitialized 메소드에서 스프링 컨테이너(Spring Container)를
		생성하고 Spring Bean Configuration File을 제공받아 Spring Bean으로 등록된 클래스를 객체로 생성 -->
		<!-- Listener 객체의 메소드에 의해 생성된 스프링 컨테이너(WebApplicationContext 객체)는
		모든 웹자원(서블릿 및 필터)에게 공유되어 사용 가능 - Spring Bean 제공  -->
		<!-- => WebApplicationContext 객체는 기본적으로 src/main/webapp 폴더의 Spring Bean 
		Configuration File 파일만 제공받아 처리 가능 -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- filter : 필터 클래스를 필터(Filter)로 등록하기 위한 엘리먼트 -->
	<!-- => 필터(Filter) : 웹프로그램 실행 전과 후에 실행될 명령을 제공 -->
	<filter>
		<!-- filter-name : 필터를 구분하기 위한 식별자를 설정하기 위한 엘리먼트 -->
		<filter-name>encodingFilter</filter-name>
		<!-- filter-class : 클라이언트 요청에 의해 객체로 생성되어 실행될 필터 클래스을 설정하기 위한 엘리먼트 -->
		<!-- CharacterEncodingFilter : 리퀘스트 메세지 몸체부의 저장된 값에 대한 문자형태를 변경하기 위한 필터 클래스 -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- init-param 엘리먼트를 사용하여 CharacterEncodingFilter 클래스에 의해 변경하고자
		하는 문자형태(캐릭터셋)을 제공  -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	
	<!-- filter-mapping : 필터가 실행되기 위한 웹프로그램의 요청 URL 주소의 패턴을 등록하기 위한 엘리먼트 -->
	<filter-mapping>
		<!-- filter-name : 클라이언트 요청에 의해 실행될 필터의 식별자를 설정하기 위한 엘리먼트 -->
		<filter-name>encodingFilter</filter-name>
		<!-- url-pattern : 필터가 실행되기 위한 웹프로그램의 요청 URL 주소의 패턴을 설정하기 위한 엘리먼트 -->
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- servlet : 서블릿 클래스를 서블릿(웹프로그램)으로 등록하기 위한 엘리먼트 -->
	<servlet>
		<!-- servlet-name : 서블릿을 구분하기 위한 식별자를 설정하기 위한 엘리먼트 -->
		<servlet-name>mvc</servlet-name>
		<!-- servlet-class : 클라이언트 요청에 의해 객체로 생성되어 실행될 서블릿 클래스을 설정하기 위한 엘리먼트 -->
		<!-- DispatcherServlet 클래스 : 컨트롤러(Controller) 역활을 제공하는 클래스 - Front Controller -->
		<servlet-class>xyz.itwill09.mvc.DispatcherServlet</servlet-class>
	</servlet>
	
	<!-- servlet-mapping : 서블릿을 실행하기 위한 URL 주소의 패턴을 등록하기 위한 엘리먼트 -->
	<servlet-mapping>
		<!-- servlet-name : 클라이언트 요청에 의해 실행될 서블릿의 식별자를 설정하기 위한 엘리먼트 -->
		<servlet-name>mvc</servlet-name>
		<!-- url-pattern : 서블릿을 실행하기 위한 URL 주소의 패턴을 설정하기 위한 엘리먼트 -->
		<!-- => Front Controller 역활을 제공하는 서블릿은 클라이언트의 모든 요청을 받아 처리되도록 설정 -->
		<url-pattern>*.itwill</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>springMvc</servlet-name>
		<!-- Spring Framework의 라이브러리에 의해 제공되는 DispatcherServlet 클래스 사용 - Front Controller -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- init-param : 서블릿 클래스에게 실행에 필요한 값을 제공하기 위한 엘리먼트 -->
		<!-- => contextConfigLocation 이름으로 스프링 컨테이너(WebApplicationContext 객체)에게
		Spring Bean Configuration File의 경로를 제공 -->
		<!-- => 현재 설정된 Front Controller 역활의 객체에게만 제공한 Spring Bean을 등록하기 
		위한 Spring Bean Configuration File -->
		<!-- => Spring Bean Configuration File은 엔터(Enter) 또는 [,] 및 [;]으로 구분하여 여러개 제공 가능 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/spring/springMvc/mvc-context1.xml
				/WEB-INF/spring/springMvc/mvc-context2.xml
			</param-value>
		</init-param>
		<!-- load-on-startup : WAS 프로그램이 시작될 때 서블릿 클래스를 미리 객체로 생성하기 위한 엘리먼트 -->
		<!-- => 클라이언트가 서블릿(Front Controller)를 요청하지 않아도 서블릿 객체를 미리 생성 -->
		<!-- => 엘리먼트 내용으로 설정된 정수값을 작을수록 먼저 서블릿 객체로 생성 -->
		<load-on-startup>0</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 스프링 어노테이션을 검색하는 component-sace 엘리먼트를 사용한 Spring Bean 
			Configuration File은 하나만 제공 가능 -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<!-- url-pattern 엘리먼트의 내용을 [/]로 설정한 경우 클라이언트의 모든 웹프로그램
		요청에 대한 처리가 가능하도록 설정 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
